<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.8.2" created="2014-04-17 00:31" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Hand picked front-end developer news, tools and inspiration each week - Front-end Dev Weekly</title>
	<link>http://frontenddevweekly.com</link>
	<description>Vital content for front-end web developers that will keep you current. Emailed to you each week, free.</description>
	<pubDate>Thu, 17 Apr 2014 00:31:13 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://frontenddevweekly.com/</wp:base_site_url>
	<wp:base_blog_url>http://frontenddevweekly.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>galen.vinter@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>2</wp:term_id><wp:category_nicename>dev-tools</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Dev Tools]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>frameworks</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Frameworks]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>opinions</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Opinions]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>resources</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Resources]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>uiux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[UI/UX]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>issue-1</wp:tag_slug><wp:tag_name><![CDATA[Issue 1]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.8.2</generator>

	<item>
				<title>Sample Page</title>
		<link>http://frontenddevweekly.com/sample-page/</link>
		<pubDate>Sun, 06 Apr 2014 00:33:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href="http://frontenddevweekly.com/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2014-04-06 00:33:45</wp:post_date>
		<wp:post_date_gmt>2014-04-06 00:33:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sample-page</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Welcome to Front-end Dev Weekly</title>
		<link>http://frontenddevweekly.com/issue/welcome-front-end-dev-weekly/</link>
		<pubDate>Tue, 15 Apr 2014 02:25:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?post_type=issue&#038;p=6</guid>
		<description></description>
		<content:encoded><![CDATA[Hey there. Galen here. I'm a front-end developer and I've been building responsive sites and a real estate theme framework for <a title="Placester" href="https://placester.com" target="_blank">Placester</a> over the past few years. I've come across a lot of resources, both wonderful and terrible. We all do as developers, so I wanted to get to the best content quicker. I wanted a concise email newsletter that would provide me the resources to make me a <strong>better developer</strong> and <strong>more valuable</strong> in the process. I couldn't find one with that mission so I created this one. So every week, I'm going to do the legwork and share with you what I think will accomplish those 2 goals with content and context. This first issue will show you what I mean.

Whether it's  just talking shop or requests for certain types of content and context, I'm open to feedback and questions, so feel free to <a href="http://twitter.com/gvinter" target="_blank">tweet</a> at or <a href="mailto:galen.vinter@gmail.com" target="_blank">email</a> me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2014-04-15 02:25:19</wp:post_date>
		<wp:post_date_gmt>2014-04-15 02:25:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>welcome-front-end-dev-weekly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>issue</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Understanding functional animations</title>
		<link>http://frontenddevweekly.com/2014/04/15/understanding-functional-animations/</link>
		<pubDate>Tue, 15 Apr 2014 05:34:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[Animations can be cool. But more importantly, they can be leveraged to display contextual information to the user. I doubt this is news to anyone reading this, but if you're like me, it can be tough to find the words to communicate why this is true. This easy read gives you words that will enable you to school your UI designer, product guy, boss or whoever in functional animations. Keep this in your back pocket.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2014-04-15 05:34:09</wp:post_date>
		<wp:post_date_gmt>2014-04-15 05:34:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-functional-animations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<category domain="category" nicename="resources"><![CDATA[Resources]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Resources]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[https://medium.com/p/926eb80d64e3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Transitional Interfaces]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Pasquale D’Silva]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>To use data-* attributes instead of classes or not to use...</title>
		<link>http://frontenddevweekly.com/2014/04/15/use-data-attributes-instead-classes-use/</link>
		<pubDate>Tue, 15 Apr 2014 05:34:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[The functional arguments are strong for using data-* (data state) attributes in HTML elements. You can even use them for styling, although it will feel a little heavy in your Sass/CSS. Data states might feel like an unnecessary shift from simply adding an "active" class to a nav bar to slide it out. But when you build out more cumbersome web apps, you'll want the reusable data states, you'll want data states to be functional instead of stylistic (they should describe an element's literal state), and they're best when reusable.  However, it's a double-edged sword: data-* can cause a slight performance hit when the DOM is stuffed. Todd Motto makes a reasonable argument for data states, but what's really interesting here is the conversation that carries out in the comments at the bottom. I love what data states provide in functionality, but won't commit to them unless I'm sure performance won't suffer beyond what's reasonable.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2014-04-15 05:34:09</wp:post_date>
		<wp:post_date_gmt>2014-04-15 05:34:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>use-data-attributes-instead-classes-use</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<category domain="category" nicename="opinions"><![CDATA[Opinions]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Opinions]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[http://toddmotto.com/stop-toggling-classes-with-js-use-behaviour-driven-dom-manipulation-with-data-states/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Stop toggling classes with JS, use behaviour driven DOM manipulation with data-states]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Todd Motto]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Visualize a site&#039;s interaction with third parties</title>
		<link>http://frontenddevweekly.com/?p=14</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[You can see the resources of a site load easily in the Resources tab of Chrome's dev console. However, I'm a visual person and seeing the amount of external resources being loaded is different than reading them off a list.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2014-04-15 02:44:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visualize-sites-interaction-third-parties</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dev-tools"><![CDATA[Dev Tools]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Dev Tools]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[https://addons.mozilla.org/en-US/firefox/addon/lightbeam/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Lightbeam Firefox Add-on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Mozilla]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CoffeeScript can be syntactically ambiguous even for seasoned devs</title>
		<link>http://frontenddevweekly.com/2014/04/15/coffeescript-can-syntactically-ambiguous-even-seasoned-devs/</link>
		<pubDate>Tue, 15 Apr 2014 05:34:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[I ran into a very small <a title="StickyKit" href="http://leafo.net/sticky-kit/" target="_blank">JS library</a> in the last project I worked on. It's actually a very small library and works quite well for what it's trying to achieve. But I needed it to do more than it did, so I had to extend the library. I looked at the CoffeeScript and couldn't decipher it. I decided to work with the compiled JS instead (I know, yuck). Part of me felt defeated by the syntactical ambiguity, but then I read Jeff Walker's post below on CoffeeScript's issues with ambiguity and readability and was relieved I was in good company. The true value here is not throwing your hands up and saying "I hate CoffeeScript", but Jeff Walker identifies how best to assess its weaknesses so you get to make the decision on your next project about whether to use it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2014-04-15 05:34:09</wp:post_date>
		<wp:post_date_gmt>2014-04-15 05:34:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coffeescript-can-syntactically-ambiguous-even-seasoned-devs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<category domain="category" nicename="opinions"><![CDATA[Opinions]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Opinions]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.walkercoderanger.com/blog/2014/03/coffeescript-isnt-the-answer/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Why CoffeeScript Isn't the Answer]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Jeff Walker]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>A list of HTML and CSS gotchas</title>
		<link>http://frontenddevweekly.com/2014/04/15/list-html-css-gotchas/</link>
		<pubDate>Tue, 15 Apr 2014 06:12:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[We've all been there - that moment you question all your years of HTML/CSS because you should know why a parent element has a "height: 0;" when its children are all floated. "Oh but why again!?" you say! Mark Otto has compiled a list of these gotchas for us. Not only that, but taking the time to read through them will make you a better CSS author. Small reminders like, :elements with a float become 'display: block;'". Well, of course I know that's true, but I still catch myself writing that redundancy from time to time. When you think you've lost your mind on what appears to be a mini CSS issue, use this list as a sanity check.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2014-04-15 06:12:35</wp:post_date>
		<wp:post_date_gmt>2014-04-15 06:12:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>list-html-css-gotchas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<category domain="category" nicename="resources"><![CDATA[Resources]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Chet Rong]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[WTF, HTML and CSS?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[http://wtfhtmlcss.com/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Resources]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Hello World</title>
		<link>http://frontenddevweekly.com/issue/hello-world/</link>
		<pubDate>Tue, 15 Apr 2014 06:00:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?post_type=issue&#038;p=39</guid>
		<description></description>
		<content:encoded><![CDATA[Here we go]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2014-04-15 06:00:40</wp:post_date>
		<wp:post_date_gmt>2014-04-15 06:00:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>issue</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1397541658]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The media query Sass mixin library I replace RespondJS with</title>
		<link>http://frontenddevweekly.com/2014/04/15/media-query-sass-mixin-library-replace-respondjs-2/</link>
		<pubDate>Tue, 15 Apr 2014 06:02:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[Bootstrap uses <a title="RespondJS" href="https://github.com/scottjehl/Respond" target="_blank">RespondJS</a> to deal with media query issues in IE 6-8. However, I prefer not to add another JS library to load. The Guardian (yes, the newspaper), has built this Sass-MQ library that gives you a single Sass mixin that will simplify all media queries, and allow you to truly build mobile-first by forgetting about IE 6-8. And yes, I use this in all of my projects now, even with Bootstrap.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2014-04-15 06:02:57</wp:post_date>
		<wp:post_date_gmt>2014-04-15 06:02:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>media-query-sass-mixin-library-replace-respondjs-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dev-tools"><![CDATA[Dev Tools]]></category>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Dev Tools]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[https://github.com/guardian/sass-mq]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[A Sass mixin that helps manipulating media queries in an elegant way.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[The Guardian]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Github + Markdown = handsome programming books</title>
		<link>http://frontenddevweekly.com/2014/04/15/github-markdown-handsome-programming-books-2/</link>
		<pubDate>Tue, 15 Apr 2014 06:04:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[There's something about this project. I love Markdown. I love Github. And I love the emergence of self-publishing. Especially with something like programming, buying books can be a real waste of money (eBooks are arguably more efficient) and space. Plus, they're not searchable. Duh. I think the Codebox Team did a great job, not to mention it's less than 2 weeks old. Great attention to detail and it's responsive. The progress bar at the top is super helpful (Kindle/iBook style). And built-in JS exercises available (soon to have Ruby and more). I believe this is the next step not just for individuals publishing books but also for companies to produce documentation and tutorials for their developers. I'm even considering implementing this for non-developer users when teaching them how to maintain a site.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2014-04-15 06:04:07</wp:post_date>
		<wp:post_date_gmt>2014-04-15 06:04:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>github-markdown-handsome-programming-books-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dev-tools"><![CDATA[Dev Tools]]></category>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Dev Tools]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.gitbook.io/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Gitbook]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Codebox]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>An HTML framework for an iOS native feel</title>
		<link>http://frontenddevweekly.com/2014/04/15/html-framework-ios-native-feel-2/</link>
		<pubDate>Tue, 15 Apr 2014 06:10:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[What do we look for from iOS-emulating frameworks? We want the cool features - pull to refresh, swiping, transitions and of course the buttons, lists, and menus. But there's more to frameworks than the cosmetics. Framework7 is truly built with apps in mind. It has built in routing and caching making the navigation history an apparent breeze, which all developers hate when trying to emulate a mobile app experience. Although I'm a big jQuery fan, I love that this is built from the ground up without jQuery - even though the syntax is very similar. This means that the library is focused heavily on its own mission, not on supporting the rest of the jQuery world's needs. I won't pretend like I've gotten my hands dirty with the code, so I won't speak to performance or ease of use at scale. However, with over 1,800 stars and 180 forks on Github, I'm sure their docs and tutorials will be populated soon and they'll be more consistently in the PhoneGap build conversations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2014-04-15 06:10:02</wp:post_date>
		<wp:post_date_gmt>2014-04-15 06:10:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html-framework-ios-native-feel-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Frameworks]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.idangero.us/framework7/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Framework7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[iDangero.us]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The next generation of icons</title>
		<link>http://frontenddevweekly.com/2014/04/15/next-generation-icons/</link>
		<pubDate>Tue, 15 Apr 2014 06:11:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://frontenddevweekly.com/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[Imagine making an icon multi-colored, multi-toned, or inverted by using Sass/Less instead of changing the icon itself. If that doesn't get you to immediately click the link below, then this should: imagine you could use the same icon despite its orientation (the same arrow will point in any direction), and the same icon will scale and actually be 3 unique icons in one (more detail when larger, less when smaller for efficiency). It was a Kickstarter project [that actually launched], and I think the concept is spectacular. And if you're worried about browser compatibility, don't be. It ships with versions based on which version of IE you need to support, but all the best features are supported all the way back to IE9! On seeing their demos my response was, "Wow - that's the way they should work".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2014-04-15 06:11:02</wp:post_date>
		<wp:post_date_gmt>2014-04-15 06:11:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>next-generation-icons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="frameworks"><![CDATA[Frameworks]]></category>
		<category domain="post_tag" nicename="issue-1"><![CDATA[Issue 1]]></category>
		<wp:postmeta>
			<wp:meta_key>issue_number</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>issue_section</wp:meta_key>
			<wp:meta_value><![CDATA[Frameworks]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[next-generation-icons-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_link</wp:meta_key>
			<wp:meta_value><![CDATA[https://useiconic.com/tour/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_title</wp:meta_key>
			<wp:meta_value><![CDATA[Iconic Icons]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>article_author</wp:meta_key>
			<wp:meta_value><![CDATA[Waybury]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
